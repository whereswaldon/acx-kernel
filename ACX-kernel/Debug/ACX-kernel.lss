
ACX-kernel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  00800200  00800200  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058b  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a3  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025b  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000304  00000000  00000000  000019af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	26 c2       	rjmp	.+1100   	; 0x4a2 <__vector_21>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a9 33       	cpi	r26, 0x39	; 57
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	2b d2       	rcall	.+1110   	; 0x55c <main>
 106:	34 c2       	rjmp	.+1128   	; 0x570 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <x_yield>:
		.global x_yield
x_yield:
//------------------------------------------------------------------
// Save "callee-save" registers
//------------------------------------------------------------------
		push	r28
 10a:	cf 93       	push	r28
		push	r29
 10c:	df 93       	push	r29
		push	r2
 10e:	2f 92       	push	r2
		push	r3
 110:	3f 92       	push	r3
		push	r4
 112:	4f 92       	push	r4
		push	r5
 114:	5f 92       	push	r5
		push	r6
 116:	6f 92       	push	r6
		push	r7
 118:	7f 92       	push	r7
		push	r8
 11a:	8f 92       	push	r8
		push	r9
 11c:	9f 92       	push	r9
		push	r10
 11e:	af 92       	push	r10
		push	r11
 120:	bf 92       	push	r11
		push	r12
 122:	cf 92       	push	r12
		push	r13
 124:	df 92       	push	r13
		push	r14
 126:	ef 92       	push	r14
		push	r15
 128:	ff 92       	push	r15
		push	r16
 12a:	0f 93       	push	r16
		push	r17
 12c:	1f 93       	push	r17

//------------------------------------------------------------------
//   Get thread ID and mask
//------------------------------------------------------------------

		lds	r20,	x_thread_id
 12e:	40 91 00 02 	lds	r20, 0x0200
		lds	r21,	x_thread_mask
 132:	50 91 38 02 	lds	r21, 0x0238

//------------------------------------------------------------------
// Store SP into current thread's stack-save area
//------------------------------------------------------------------
		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 136:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 138:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 13a:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 13c:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 13e:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 140:	e6 0f       	add	r30, r22
		adc r31,	0			;pull in the carry from previous, if any
 142:	f0 1d       	adc	r31, r0
		
		;write the SP into the stack save area
		lds	r16,	(0x5d)		;Load SP low byte
 144:	00 91 5d 00 	lds	r16, 0x005D
		st	Z,		r16			;save SP low byte
 148:	00 83       	st	Z, r16
		lds r16,	(0x5e)		;Load SP high byte
 14a:	00 91 5e 00 	lds	r16, 0x005E
		std	Z+1,	r16			;save SP high byte
 14e:	01 83       	std	Z+1, r16	; 0x01

00000150 <x_schedule>:
;                         if entered from x_new() function
;-------------------------------------------------------------------------
		.global	x_schedule
x_schedule:
	// determine READY status of each thread
		lds r18,	disables	;load the disabled status
 150:	20 91 01 02 	lds	r18, 0x0201
		lds r19,	suspends	;load the suspended status
 154:	30 91 03 02 	lds	r19, 0x0203
		or	r18,	r19			;or disables and suspends
 158:	23 2b       	or	r18, r19
		lds r19,	delays		;load the delayed status
 15a:	30 91 02 02 	lds	r19, 0x0202
		or	r18,	r19			;or disables, suspends, and delays
 15e:	23 2b       	or	r18, r19

		lds	r20,	x_thread_id	;load the id of the current thread
 160:	40 91 00 02 	lds	r20, 0x0200
		lds r21,	x_thread_mask	;load the thread id mask
 164:	50 91 38 02 	lds	r21, 0x0238

00000168 <loop>:

;------------------------------------------------
;   Loop through all threads to test for READY
;------------------------------------------------
loop:
		inc	r20					;increment thread id
 168:	43 95       	inc	r20
		lsl r21					;rotate thread mask left
 16a:	55 0f       	add	r21, r21
		cpi	r21,	0			;check if thread mask is zero
 16c:	50 30       	cpi	r21, 0x00	; 0
		brne skip				;jump over second rotate
 16e:	11 f4       	brne	.+4      	; 0x174 <skip>
		inc r21					;reset the thread mask to one
 170:	53 95       	inc	r21
		ldi	r20,	0			;reset thread id to zero
 172:	40 e0       	ldi	r20, 0x00	; 0

00000174 <skip>:
skip:	
		mov r22,	r21			;copy the thread mask
 174:	65 2f       	mov	r22, r21
		and	r22,	r18			;compare thread mask to or-ed statuses
 176:	62 23       	and	r22, r18
		cpi r22,	0			;if the result is zero, this next thread is ready
 178:	60 30       	cpi	r22, 0x00	; 0
		brne loop				;else restart the loop
 17a:	b1 f7       	brne	.-20     	; 0x168 <loop>

		jmp	restore				;skip the nap code
 17c:	01 c0       	rjmp	.+2      	; 0x180 <restore>

0000017e <nap>:
;----------------------------------------------------------
nap:
		; add sleep instructions here...
		;sleep
		;TODO: uncomment & implement
		rjmp	x_schedule			
 17e:	e8 cf       	rjmp	.-48     	; 0x150 <x_schedule>

00000180 <restore>:
restore:
		;r20 holds thread id
		;r21 holds thread mask

		;set the thread id
		sts x_thread_id,	r20
 180:	40 93 00 02 	sts	0x0200, r20
		;set the thread mask
		sts x_thread_mask, r21
 184:	50 93 38 02 	sts	0x0238, r21

		;compute index into stacks array
		mov	r22,	r20			;make a copy of the thread id
 188:	64 2f       	mov	r22, r20
		lsl	r22	  				;left shift two to multiply by 2
 18a:	66 0f       	add	r22, r22
		lsl	r22	  				;left shift two to multiply by 2
 18c:	66 0f       	add	r22, r22
		ldi	r30,	lo8(stacks)	;load the address of the array
 18e:	e8 e1       	ldi	r30, 0x18	; 24
		ldi r31,	hi8(stacks)	;load the other byte
 190:	f2 e0       	ldi	r31, 0x02	; 2
		add	r30,	r22			;increment the address by index
 192:	e6 0f       	add	r30, r22
		;adc r31,	0			;pull in the carry from previous, if any
		
		// update hardware SP
		ld	r23,	Z+			;load new thread's low SP byte
 194:	71 91       	ld	r23, Z+
		ld	r24,	Z			;load new thread's high SP byte
 196:	80 81       	ld	r24, Z
		sts	(0x5d),	r23			;change lower SP byte
 198:	70 93 5d 00 	sts	0x005D, r23
		sts (0x5e),	r24			;change upper SP byte
 19c:	80 93 5e 00 	sts	0x005E, r24

		// Restore registers
		pop	r17
 1a0:	1f 91       	pop	r17
		pop	r16
 1a2:	0f 91       	pop	r16
		pop	r15
 1a4:	ff 90       	pop	r15
		pop	r14
 1a6:	ef 90       	pop	r14
		pop	r13
 1a8:	df 90       	pop	r13
		pop	r12
 1aa:	cf 90       	pop	r12
		pop	r11
 1ac:	bf 90       	pop	r11
		pop	r10
 1ae:	af 90       	pop	r10
		pop	r9
 1b0:	9f 90       	pop	r9
		pop	r8
 1b2:	8f 90       	pop	r8
		pop	r7
 1b4:	7f 90       	pop	r7
		pop	r6
 1b6:	6f 90       	pop	r6
		pop	r5
 1b8:	5f 90       	pop	r5
		pop	r4
 1ba:	4f 90       	pop	r4
		pop	r3
 1bc:	3f 90       	pop	r3
		pop	r2
 1be:	2f 90       	pop	r2
		pop	r29
 1c0:	df 91       	pop	r29
		pop	r28
 1c2:	cf 91       	pop	r28

		// Return to next thread
		ret
 1c4:	08 95       	ret

000001c6 <x_init>:
/*
 * Initializes kernel data structures, sets stack pointer
 * to Thread0 stack area returns to caller. The calling
 * function becomes Thread0.
 */
void x_init() {
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
	//initialize stacks
	stacks[0].pHead = (byte *)TH0_START;
 1ca:	e8 e1       	ldi	r30, 0x18	; 24
 1cc:	f2 e0       	ldi	r31, 0x02	; 2
 1ce:	8f e7       	ldi	r24, 0x7F	; 127
 1d0:	91 e2       	ldi	r25, 0x21	; 33
 1d2:	91 83       	std	Z+1, r25	; 0x01
 1d4:	80 83       	st	Z, r24
	stacks[0].pBase = (byte *)TH0_START;
 1d6:	93 83       	std	Z+3, r25	; 0x03
 1d8:	82 83       	std	Z+2, r24	; 0x02
	stacks[1].pHead = (byte *)TH1_START;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	90 e2       	ldi	r25, 0x20	; 32
 1de:	95 83       	std	Z+5, r25	; 0x05
 1e0:	84 83       	std	Z+4, r24	; 0x04
	stacks[1].pBase = (byte *)TH1_START;
 1e2:	97 83       	std	Z+7, r25	; 0x07
 1e4:	86 83       	std	Z+6, r24	; 0x06
	stacks[2].pHead = (byte *)TH2_START;
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	90 e2       	ldi	r25, 0x20	; 32
 1ea:	91 87       	std	Z+9, r25	; 0x09
 1ec:	80 87       	std	Z+8, r24	; 0x08
	stacks[2].pBase = (byte *)TH2_START;
 1ee:	93 87       	std	Z+11, r25	; 0x0b
 1f0:	82 87       	std	Z+10, r24	; 0x0a
	stacks[3].pHead = (byte *)TH3_START;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	9f e1       	ldi	r25, 0x1F	; 31
 1f6:	95 87       	std	Z+13, r25	; 0x0d
 1f8:	84 87       	std	Z+12, r24	; 0x0c
	stacks[3].pBase = (byte *)TH3_START;
 1fa:	97 87       	std	Z+15, r25	; 0x0f
 1fc:	86 87       	std	Z+14, r24	; 0x0e
	stacks[4].pHead = (byte *)TH4_START;
 1fe:	8f e7       	ldi	r24, 0x7F	; 127
 200:	9f e1       	ldi	r25, 0x1F	; 31
 202:	91 8b       	std	Z+17, r25	; 0x11
 204:	80 8b       	std	Z+16, r24	; 0x10
	stacks[4].pBase = (byte *)TH4_START;
 206:	93 8b       	std	Z+19, r25	; 0x13
 208:	82 8b       	std	Z+18, r24	; 0x12
	stacks[5].pHead = (byte *)TH5_START;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	9e e1       	ldi	r25, 0x1E	; 30
 20e:	95 8b       	std	Z+21, r25	; 0x15
 210:	84 8b       	std	Z+20, r24	; 0x14
	stacks[5].pBase = (byte *)TH5_START;
 212:	97 8b       	std	Z+23, r25	; 0x17
 214:	86 8b       	std	Z+22, r24	; 0x16
	stacks[6].pHead = (byte *)TH6_START;
 216:	8f e7       	ldi	r24, 0x7F	; 127
 218:	9e e1       	ldi	r25, 0x1E	; 30
 21a:	91 8f       	std	Z+25, r25	; 0x19
 21c:	80 8f       	std	Z+24, r24	; 0x18
	stacks[6].pBase = (byte *)TH6_START;
 21e:	93 8f       	std	Z+27, r25	; 0x1b
 220:	82 8f       	std	Z+26, r24	; 0x1a
	stacks[7].pHead = (byte *)TH7_START;
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9d e1       	ldi	r25, 0x1D	; 29
 226:	95 8f       	std	Z+29, r25	; 0x1d
 228:	84 8f       	std	Z+28, r24	; 0x1c
	stacks[7].pBase = (byte *)TH7_START;
 22a:	97 8f       	std	Z+31, r25	; 0x1f
 22c:	86 8f       	std	Z+30, r24	; 0x1e

	//initialize canaries
	byte * curr_canary = (byte *)TH0_CANARY;
	*curr_canary = CANARY_VALUE;
 22e:	8a ea       	ldi	r24, 0xAA	; 170
 230:	80 93 00 21 	sts	0x2100, r24
	curr_canary = (byte *)TH1_CANARY;
	*curr_canary = CANARY_VALUE;
 234:	80 93 80 20 	sts	0x2080, r24
	curr_canary = (byte *)TH2_CANARY;
	*curr_canary = CANARY_VALUE;
 238:	80 93 00 20 	sts	0x2000, r24
	curr_canary = (byte *)TH3_CANARY;
	*curr_canary = CANARY_VALUE;
 23c:	80 93 80 1f 	sts	0x1F80, r24
	curr_canary = (byte *)TH4_CANARY;
	*curr_canary = CANARY_VALUE;
 240:	80 93 00 1f 	sts	0x1F00, r24
	curr_canary = (byte *)TH5_CANARY;
	*curr_canary = CANARY_VALUE;
 244:	80 93 80 1e 	sts	0x1E80, r24
	curr_canary = (byte *)TH6_CANARY;
	*curr_canary = CANARY_VALUE;
 248:	80 93 00 1e 	sts	0x1E00, r24
	curr_canary = (byte *)TH7_CANARY;
	*curr_canary = CANARY_VALUE;
 24c:	80 93 80 1d 	sts	0x1D80, r24

	//initialize counter
	ticks = 0;
 250:	10 92 14 02 	sts	0x0214, r1
 254:	10 92 15 02 	sts	0x0215, r1
 258:	10 92 16 02 	sts	0x0216, r1
 25c:	10 92 17 02 	sts	0x0217, r1

	//Initialize Delays
	x_thread_delay[0] = 0;
 260:	e4 e0       	ldi	r30, 0x04	; 4
 262:	f2 e0       	ldi	r31, 0x02	; 2
 264:	11 82       	std	Z+1, r1	; 0x01
 266:	10 82       	st	Z, r1
	x_thread_delay[1] = 0;
 268:	13 82       	std	Z+3, r1	; 0x03
 26a:	12 82       	std	Z+2, r1	; 0x02
	x_thread_delay[2] = 0;
 26c:	15 82       	std	Z+5, r1	; 0x05
 26e:	14 82       	std	Z+4, r1	; 0x04
	x_thread_delay[3] = 0;
 270:	17 82       	std	Z+7, r1	; 0x07
 272:	16 82       	std	Z+6, r1	; 0x06
	x_thread_delay[4] = 0;
 274:	11 86       	std	Z+9, r1	; 0x09
 276:	10 86       	std	Z+8, r1	; 0x08
	x_thread_delay[5] = 0;
 278:	13 86       	std	Z+11, r1	; 0x0b
 27a:	12 86       	std	Z+10, r1	; 0x0a
	x_thread_delay[6] = 0;
 27c:	15 86       	std	Z+13, r1	; 0x0d
 27e:	14 86       	std	Z+12, r1	; 0x0c
	x_thread_delay[7] = 0;
 280:	17 86       	std	Z+15, r1	; 0x0f
 282:	16 86       	std	Z+14, r1	; 0x0e

	//Disable all but thread 0
	disables = 0xFE;
 284:	8e ef       	ldi	r24, 0xFE	; 254
 286:	80 93 01 02 	sts	0x0201, r24

	//Set initial statuses
	delays = 0;
 28a:	10 92 02 02 	sts	0x0202, r1
	suspends = 0;
 28e:	10 92 03 02 	sts	0x0203, r1

	//Configure this to return as thread 0
	x_thread_id = 0;
 292:	10 92 00 02 	sts	0x0200, r1
	x_thread_mask = 0x01;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 38 02 	sts	0x0238, r24

	//initialize delay timer settings
	TCCR0A = 0x02; // CTC mode
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	84 bd       	out	0x24, r24	; 36
	OCR0A = 250; //match at 250 (1 msec)
 2a0:	9a ef       	ldi	r25, 0xFA	; 250
 2a2:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02; //enable compare-match A interrupt
 2a4:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0x03; //enable global interrupts
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	85 bd       	out	0x25, r24	; 37

	//Change the stack location to Thread 0's space
	int i = 0;
	byte * newStack = TH0_START;
	//iterate across the old stack and copy all values
	for (; STACK_START-i >= SP; i++) {
 2ac:	8d b7       	in	r24, 0x3d	; 61
 2ae:	9e b7       	in	r25, 0x3e	; 62
 2b0:	81 15       	cp	r24, r1
 2b2:	92 42       	sbci	r25, 0x22	; 34
 2b4:	b0 f4       	brcc	.+44     	; 0x2e2 <x_init+0x11c>
 2b6:	a0 e8       	ldi	r26, 0x80	; 128
 2b8:	b1 e2       	ldi	r27, 0x21	; 33
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	92 e2       	ldi	r25, 0x22	; 34
 2be:	c1 e0       	ldi	r28, 0x01	; 1
 2c0:	d2 e2       	ldi	r29, 0x22	; 34
 2c2:	fc 01       	movw	r30, r24
		*(newStack-i) = *((byte *)STACK_START-i);
 2c4:	22 91       	ld	r18, -Z
 2c6:	2e 93       	st	-X, r18
 2c8:	be 01       	movw	r22, r28
 2ca:	68 1b       	sub	r22, r24
 2cc:	79 0b       	sbc	r23, r25
 2ce:	9c 01       	movw	r18, r24
 2d0:	22 50       	subi	r18, 0x02	; 2
 2d2:	31 09       	sbc	r19, r1

	//Change the stack location to Thread 0's space
	int i = 0;
	byte * newStack = TH0_START;
	//iterate across the old stack and copy all values
	for (; STACK_START-i >= SP; i++) {
 2d4:	4d b7       	in	r20, 0x3d	; 61
 2d6:	5e b7       	in	r21, 0x3e	; 62
 2d8:	cf 01       	movw	r24, r30
 2da:	24 17       	cp	r18, r20
 2dc:	35 07       	cpc	r19, r21
 2de:	88 f7       	brcc	.-30     	; 0x2c2 <x_init+0xfc>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <x_init+0x120>
	TIMSK0 = 0x02; //enable compare-match A interrupt
	TCCR0B = 0x03; //enable global interrupts


	//Change the stack location to Thread 0's space
	int i = 0;
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
	for (; STACK_START-i >= SP; i++) {
		*(newStack-i) = *((byte *)STACK_START-i);
	}
	
	//disable interrupts
	cli();
 2e6:	f8 94       	cli
	//Set new stack pointer. +1 compensates for final
	//increment of i.
	SP = (int)TH0_START-i+1;
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	91 e2       	ldi	r25, 0x21	; 33
 2ec:	86 1b       	sub	r24, r22
 2ee:	97 0b       	sbc	r25, r23
 2f0:	9e bf       	out	0x3e, r25	; 62
 2f2:	8d bf       	out	0x3d, r24	; 61
	//set global interrupt enable
	sei();
 2f4:	78 94       	sei
	return;
}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <x_new>:
 * thread is replaced and rescheduling takes place.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17

	byte low = (byte) (((int) pthread) & 0xff);
 300:	06 2f       	mov	r16, r22
 302:	17 2f       	mov	r17, r23
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
 304:	e8 2f       	mov	r30, r24
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e8 5e       	subi	r30, 0xE8	; 232
 312:	fd 4f       	sbci	r31, 0xFD	; 253
 314:	a0 81       	ld	r26, Z
 316:	b1 81       	ldd	r27, Z+1	; 0x01
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
 318:	6c 93       	st	X, r22
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
 31a:	a0 81       	ld	r26, Z
 31c:	b1 81       	ldd	r27, Z+1	; 0x01
 31e:	11 97       	sbiw	r26, 0x01	; 1
 320:	b1 83       	std	Z+1, r27	; 0x01
 322:	a0 83       	st	Z, r26
 * interrupt handler.
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
 324:	7c 93       	st	X, r23
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = mid;//midbyte address
	stacks[tid].pHead -= 1;
 326:	a0 81       	ld	r26, Z
 328:	b1 81       	ldd	r27, Z+1	; 0x01
 32a:	11 97       	sbiw	r26, 0x01	; 1
 32c:	b1 83       	std	Z+1, r27	; 0x01
 32e:	a0 83       	st	Z, r26
 */
void x_new(byte tid, PTHREAD pthread, byte isEnabled) {

	byte low = (byte) (((int) pthread) & 0xff);
	byte mid = (byte) ((((int) pthread) & 0xff00) >> 8);
	byte high = (byte) ((((int) pthread) & 0xff0000) >> 16);
 330:	01 2e       	mov	r0, r17
 332:	00 0c       	add	r0, r0
 334:	22 0b       	sbc	r18, r18
 336:	33 0b       	sbc	r19, r19
 338:	3c 93       	st	X, r19
	*(stacks[tid].pHead) = low;//lowbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = mid;//midbyte address
	stacks[tid].pHead -= 1;
	*(stacks[tid].pHead) = high;//highbyte address
	stacks[tid].pHead -= 1;
 33a:	a0 81       	ld	r26, Z
 33c:	b1 81       	ldd	r27, Z+1	; 0x01

	//save register values
	stacks[tid].pHead -= 1;
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	b1 83       	std	Z+1, r27	; 0x01
 342:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 28;
 344:	9c e1       	ldi	r25, 0x1C	; 28
 346:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 348:	a0 81       	ld	r26, Z
 34a:	b1 81       	ldd	r27, Z+1	; 0x01
 34c:	11 97       	sbiw	r26, 0x01	; 1
 34e:	b1 83       	std	Z+1, r27	; 0x01
 350:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 29;
 352:	9d e1       	ldi	r25, 0x1D	; 29
 354:	9c 93       	st	X, r25
	*(stacks[tid].pHead) = 2;
 356:	a0 81       	ld	r26, Z
 358:	b1 81       	ldd	r27, Z+1	; 0x01
 35a:	92 e0       	ldi	r25, 0x02	; 2
 35c:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 35e:	a0 81       	ld	r26, Z
 360:	b1 81       	ldd	r27, Z+1	; 0x01
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	b1 83       	std	Z+1, r27	; 0x01
 366:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 3;
 368:	93 e0       	ldi	r25, 0x03	; 3
 36a:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 36c:	a0 81       	ld	r26, Z
 36e:	b1 81       	ldd	r27, Z+1	; 0x01
 370:	11 97       	sbiw	r26, 0x01	; 1
 372:	b1 83       	std	Z+1, r27	; 0x01
 374:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 4;
 376:	94 e0       	ldi	r25, 0x04	; 4
 378:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 37a:	a0 81       	ld	r26, Z
 37c:	b1 81       	ldd	r27, Z+1	; 0x01
 37e:	11 97       	sbiw	r26, 0x01	; 1
 380:	b1 83       	std	Z+1, r27	; 0x01
 382:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 5;
 384:	95 e0       	ldi	r25, 0x05	; 5
 386:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 388:	a0 81       	ld	r26, Z
 38a:	b1 81       	ldd	r27, Z+1	; 0x01
 38c:	11 97       	sbiw	r26, 0x01	; 1
 38e:	b1 83       	std	Z+1, r27	; 0x01
 390:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 6;
 392:	96 e0       	ldi	r25, 0x06	; 6
 394:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 396:	a0 81       	ld	r26, Z
 398:	b1 81       	ldd	r27, Z+1	; 0x01
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	b1 83       	std	Z+1, r27	; 0x01
 39e:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 7;
 3a0:	97 e0       	ldi	r25, 0x07	; 7
 3a2:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3a4:	a0 81       	ld	r26, Z
 3a6:	b1 81       	ldd	r27, Z+1	; 0x01
 3a8:	11 97       	sbiw	r26, 0x01	; 1
 3aa:	b1 83       	std	Z+1, r27	; 0x01
 3ac:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 8;
 3ae:	98 e0       	ldi	r25, 0x08	; 8
 3b0:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3b2:	a0 81       	ld	r26, Z
 3b4:	b1 81       	ldd	r27, Z+1	; 0x01
 3b6:	11 97       	sbiw	r26, 0x01	; 1
 3b8:	b1 83       	std	Z+1, r27	; 0x01
 3ba:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 9;
 3bc:	99 e0       	ldi	r25, 0x09	; 9
 3be:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3c0:	a0 81       	ld	r26, Z
 3c2:	b1 81       	ldd	r27, Z+1	; 0x01
 3c4:	11 97       	sbiw	r26, 0x01	; 1
 3c6:	b1 83       	std	Z+1, r27	; 0x01
 3c8:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 10;
 3ca:	9a e0       	ldi	r25, 0x0A	; 10
 3cc:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3ce:	a0 81       	ld	r26, Z
 3d0:	b1 81       	ldd	r27, Z+1	; 0x01
 3d2:	11 97       	sbiw	r26, 0x01	; 1
 3d4:	b1 83       	std	Z+1, r27	; 0x01
 3d6:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 11;
 3d8:	9b e0       	ldi	r25, 0x0B	; 11
 3da:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3dc:	a0 81       	ld	r26, Z
 3de:	b1 81       	ldd	r27, Z+1	; 0x01
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	b1 83       	std	Z+1, r27	; 0x01
 3e4:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 12;
 3e6:	9c e0       	ldi	r25, 0x0C	; 12
 3e8:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3ea:	a0 81       	ld	r26, Z
 3ec:	b1 81       	ldd	r27, Z+1	; 0x01
 3ee:	11 97       	sbiw	r26, 0x01	; 1
 3f0:	b1 83       	std	Z+1, r27	; 0x01
 3f2:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 13;
 3f4:	9d e0       	ldi	r25, 0x0D	; 13
 3f6:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 3f8:	a0 81       	ld	r26, Z
 3fa:	b1 81       	ldd	r27, Z+1	; 0x01
 3fc:	11 97       	sbiw	r26, 0x01	; 1
 3fe:	b1 83       	std	Z+1, r27	; 0x01
 400:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 14;
 402:	9e e0       	ldi	r25, 0x0E	; 14
 404:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 406:	a0 81       	ld	r26, Z
 408:	b1 81       	ldd	r27, Z+1	; 0x01
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	b1 83       	std	Z+1, r27	; 0x01
 40e:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 15;
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 414:	a0 81       	ld	r26, Z
 416:	b1 81       	ldd	r27, Z+1	; 0x01
 418:	11 97       	sbiw	r26, 0x01	; 1
 41a:	b1 83       	std	Z+1, r27	; 0x01
 41c:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 16;
 41e:	90 e1       	ldi	r25, 0x10	; 16
 420:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 422:	a0 81       	ld	r26, Z
 424:	b1 81       	ldd	r27, Z+1	; 0x01
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	b1 83       	std	Z+1, r27	; 0x01
 42a:	a0 83       	st	Z, r26
	*(stacks[tid].pHead) = 17;
 42c:	91 e1       	ldi	r25, 0x11	; 17
 42e:	9c 93       	st	X, r25
	stacks[tid].pHead -= 1;
 430:	20 81       	ld	r18, Z
 432:	31 81       	ldd	r19, Z+1	; 0x01
 434:	21 50       	subi	r18, 0x01	; 1
 436:	31 09       	sbc	r19, r1
 438:	31 83       	std	Z+1, r19	; 0x01
 43a:	20 83       	st	Z, r18


	//create a bytemask to enable/disable a thread
	byte mask = 1;
	mask = mask << tid;
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	08 2e       	mov	r0, r24
 442:	02 c0       	rjmp	.+4      	; 0x448 <x_new+0x14c>
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <x_new+0x148>

	if (isEnabled) {
 44c:	44 23       	and	r20, r20
 44e:	39 f0       	breq	.+14     	; 0x45e <x_new+0x162>
	//Enable the thread
		disables &= (~mask);
 450:	20 95       	com	r18
 452:	90 91 01 02 	lds	r25, 0x0201
 456:	29 23       	and	r18, r25
 458:	20 93 01 02 	sts	0x0201, r18
 45c:	05 c0       	rjmp	.+10     	; 0x468 <x_new+0x16c>
	} else {
		//disable the thread
		disables |= mask;
 45e:	90 91 01 02 	lds	r25, 0x0201
 462:	29 2b       	or	r18, r25
 464:	20 93 01 02 	sts	0x0201, r18
	}
	if (tid == x_thread_id) {
 468:	90 91 00 02 	lds	r25, 0x0200
 46c:	89 13       	cpse	r24, r25
 46e:	01 c0       	rjmp	.+2      	; 0x472 <x_new+0x176>
		//we've just overwritten the current thread, so reschedule
		x_schedule();
 470:	6f de       	rcall	.-802    	; 0x150 <x_schedule>
	}
}
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <x_delay>:
 * tick frequency, set at system initialization.
 *
 * Note: This function MAY NOT be called from an
 * interrupt handler.
 */
void x_delay(int ticks) {
 478:	9c 01       	movw	r18, r24
	//disable this thread
	delays |= x_thread_mask;
 47a:	80 91 02 02 	lds	r24, 0x0202
 47e:	90 91 38 02 	lds	r25, 0x0238
 482:	98 2b       	or	r25, r24
 484:	90 93 02 02 	sts	0x0202, r25
	cli(); //disable interrupts
 488:	f8 94       	cli
	x_thread_delay[x_thread_id] = ticks;
 48a:	e0 91 00 02 	lds	r30, 0x0200
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	ec 5f       	subi	r30, 0xFC	; 252
 496:	fd 4f       	sbci	r31, 0xFD	; 253
 498:	31 83       	std	Z+1, r19	; 0x01
 49a:	20 83       	st	Z, r18
	sei(); //enable interrupts
 49c:	78 94       	sei
	x_yield(); //reschedule
 49e:	35 ce       	rjmp	.-918    	; 0x10a <x_yield>
 4a0:	08 95       	ret

000004a2 <__vector_21>:
/*
 * The interrupt service routine for timer0.
 * Decrements delays for all threads and enables threads
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	0b b6       	in	r0, 0x3b	; 59
 4ae:	0f 92       	push	r0
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	4f 93       	push	r20
 4b6:	5f 93       	push	r21
 4b8:	6f 93       	push	r22
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	cli(); //disable interrupts
 4c2:	f8 94       	cli
 4c4:	60 91 01 02 	lds	r22, 0x0201
	int i = 0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
			x_thread_delay[i]--;
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
			//enable this thread
			disables &= ~(0x1 << i);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	50 e0       	ldi	r21, 0x00	; 0
ISR(TIMER0_COMPA_vect){
	cli(); //disable interrupts
	int i = 0;
	for (; i < NUM_THREADS; i++) {
		//if the count is nonzero
		if (x_thread_delay[i] > 0) {
 4d0:	fc 01       	movw	r30, r24
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	ec 5f       	subi	r30, 0xFC	; 252
 4d8:	fd 4f       	sbci	r31, 0xFD	; 253
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	23 2b       	or	r18, r19
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <__vector_21+0x56>
			//decrement the count
			x_thread_delay[i]--;
 4e2:	fc 01       	movw	r30, r24
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	ec 5f       	subi	r30, 0xFC	; 252
 4ea:	fd 4f       	sbci	r31, 0xFD	; 253
 4ec:	20 81       	ld	r18, Z
 4ee:	31 81       	ldd	r19, Z+1	; 0x01
 4f0:	21 50       	subi	r18, 0x01	; 1
 4f2:	31 09       	sbc	r19, r1
 4f4:	31 83       	std	Z+1, r19	; 0x01
 4f6:	20 83       	st	Z, r18
		}
		//if the current thread isn't disabled
		if (x_thread_delay[i] == 0) {
 4f8:	fc 01       	movw	r30, r24
 4fa:	ee 0f       	add	r30, r30
 4fc:	ff 1f       	adc	r31, r31
 4fe:	ec 5f       	subi	r30, 0xFC	; 252
 500:	fd 4f       	sbci	r31, 0xFD	; 253
 502:	20 81       	ld	r18, Z
 504:	31 81       	ldd	r19, Z+1	; 0x01
 506:	23 2b       	or	r18, r19
 508:	49 f4       	brne	.+18     	; 0x51c <__vector_21+0x7a>
			//enable this thread
			disables &= ~(0x1 << i);
 50a:	9a 01       	movw	r18, r20
 50c:	08 2e       	mov	r0, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__vector_21+0x72>
 510:	22 0f       	add	r18, r18
 512:	33 1f       	adc	r19, r19
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <__vector_21+0x6e>
 518:	20 95       	com	r18
 51a:	62 23       	and	r22, r18
 * whose delay values reach zero.
 */
ISR(TIMER0_COMPA_vect){
	cli(); //disable interrupts
	int i = 0;
	for (; i < NUM_THREADS; i++) {
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	88 30       	cpi	r24, 0x08	; 8
 520:	91 05       	cpc	r25, r1
 522:	b1 f6       	brne	.-84     	; 0x4d0 <__vector_21+0x2e>
 524:	60 93 01 02 	sts	0x0201, r22
		if (x_thread_delay[i] == 0) {
			//enable this thread
			disables &= ~(0x1 << i);
		}
	}
	sei(); //enable interrupts
 528:	78 94       	sei
}
 52a:	ff 91       	pop	r31
 52c:	ef 91       	pop	r30
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0b be       	out	0x3b, r0	; 59
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <forever>:
#include <util/delay.h>
#include "acx.h"


void forever() {
	DDRB=0x80;
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	84 b9       	out	0x04, r24	; 4
	while(1) {
		PORTB ^= 0x80;
 54e:	85 b1       	in	r24, 0x05	; 5
 550:	80 58       	subi	r24, 0x80	; 128
 552:	85 b9       	out	0x05, r24	; 5
		x_delay(100);
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	8f df       	rcall	.-226    	; 0x478 <x_delay>
	}
 55a:	f9 cf       	rjmp	.-14     	; 0x54e <forever+0x4>

0000055c <main>:
}

int main(void)
{
	x_init();
 55c:	34 de       	rcall	.-920    	; 0x1c6 <x_init>
	x_new(1, forever, 1);
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	65 ea       	ldi	r22, 0xA5	; 165
 562:	72 e0       	ldi	r23, 0x02	; 2
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	ca de       	rcall	.-620    	; 0x2fc <x_new>
	x_yield();
 568:	d0 dd       	rcall	.-1120   	; 0x10a <x_yield>
	
	return 0;
}
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
